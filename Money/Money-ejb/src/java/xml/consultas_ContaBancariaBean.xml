<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
	version="1.0">

    <named-query name="ContaBancariaBean.buscarContaBancariaPorNomeTipo">
        <query>
			Select c From ContaBancaria c
                        Where c.nomeConta = :nomeConta
                        AND c.tipoConta = :tipoConta
        </query>
    </named-query>
    
    <named-query name="ContaBancariaBean.buscarContaBancariasPorUsuario">
        <query>
			Select distinct c From ContaBancaria c
                        Where c.user = :user
                        OR c.user.conjuge = :user
                        Order by c.tipoConta, c.nomeConta
        </query>
    </named-query>
    
    <named-query name="ContaBancariaBean.buscarContaBancariasPorUsuarioTipoPaginado">
        <query>
			Select distinct c From ContaBancaria c
                        Where (c.user = :user
                        OR c.user.conjuge = :user)
                        AND (:tipoConta is null OR c.tipoConta = :tipoConta2)
                        AND (:nomeConta is null OR upper(c.nomeConta)
                        LIKE upper(:nomeConta))
                        Order by c.tipoConta, c.nomeConta
        </query>
    </named-query>
    
    <named-query name="ContaBancariaBean.contarContaBancariasPorUsuarioTipo">
        <query>
			Select count(distinct c) From ContaBancaria c
                        Where (c.user = :user
                        OR c.user.conjuge = :user)
                        AND (:tipoConta is null OR c.tipoConta = :tipoConta2)
                        AND (:nomeConta is null OR upper(c.nomeConta) 
                        LIKE upper(:nomeConta))
        </query>
    </named-query>
   
</entity-mappings>
